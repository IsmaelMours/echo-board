name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-checks:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR title
        run: |
          # Check if PR title follows conventional commits format
          TITLE="${{ github.event.pull_request.title }}"
          if [[ ! $TITLE =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+ ]]; then
            echo "❌ PR title should follow conventional commits format: type(scope): description"
            echo "Examples:"
            echo "  feat: add user authentication"
            echo "  fix(api): resolve login issue"
            echo "  docs: update README"
            exit 1
          else
            echo "✅ PR title follows conventional commits format"
          fi

      - name: Check for breaking changes
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          if [[ $TITLE =~ BREAKING CHANGE|! ]]; then
            echo "⚠️ This PR contains breaking changes"
            echo "Please ensure the PR description includes details about the breaking changes"
          fi

      - name: Check file changes
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check for sensitive files
          SENSITIVE_FILES=$(echo "$CHANGED_FILES" | grep -E "\.(env|key|pem|p12|pfx)$" || true)
          if [ -n "$SENSITIVE_FILES" ]; then
            echo "❌ Sensitive files detected in PR:"
            echo "$SENSITIVE_FILES"
            echo "Please remove sensitive files from the PR"
            exit 1
          fi
          
          # Check for large files
          LARGE_FILES=$(git diff --name-only --diff-filter=A origin/main...HEAD | xargs -I {} sh -c 'if [ -f "{}" ]; then if [ $(stat -c%s "{}") -gt 10485760 ]; then echo "{}"; fi; fi' || true)
          if [ -n "$LARGE_FILES" ]; then
            echo "⚠️ Large files detected (>10MB):"
            echo "$LARGE_FILES"
            echo "Consider using Git LFS for large files"
          fi

      - name: Validate Kubernetes manifests
        run: |
          # Check if k8s-dev files are valid YAML
          if [ -d "k8s-dev" ]; then
            for file in k8s-dev/*.yaml; do
              if [ -f "$file" ]; then
                echo "Validating $file"
                # Basic YAML syntax check
                python3 -c "import yaml; yaml.safe_load(open('$file'))" || {
                  echo "❌ Invalid YAML in $file"
                  exit 1
                }
                echo "✅ $file is valid YAML"
              fi
            done
          fi

      - name: Check Dockerfile syntax
        run: |
          # Check Dockerfile syntax for each service
          for dockerfile in server/Dockerfile client/Dockerfile worker/Dockerfile; do
            if [ -f "$dockerfile" ]; then
              echo "Checking $dockerfile"
              # Basic syntax check - look for common issues
              if grep -q "FROM.*:" "$dockerfile" && ! grep -q "FROM.*:.*" "$dockerfile"; then
                echo "⚠️ Consider specifying a tag for FROM instruction in $dockerfile"
              fi
              echo "✅ $dockerfile syntax looks good"
            fi
          done

      - name: Generate PR summary
        run: |
          echo "## PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Checks Passed" >> $GITHUB_STEP_SUMMARY
          echo "- PR title follows conventional commits format" >> $GITHUB_STEP_SUMMARY
          echo "- No sensitive files detected" >> $GITHUB_STEP_SUMMARY
          echo "- Kubernetes manifests are valid YAML" >> $GITHUB_STEP_SUMMARY
          echo "- Dockerfile syntax is valid" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Ensure all CI checks pass" >> $GITHUB_STEP_SUMMARY
          echo "2. Request review from team members" >> $GITHUB_STEP_SUMMARY
          echo "3. Address any feedback" >> $GITHUB_STEP_SUMMARY
          echo "4. Merge when approved" >> $GITHUB_STEP_SUMMARY

  preview-deployment:
    name: Preview Deployment
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure Digital Ocean kubeconfig
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          args: kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}

      - name: Create preview namespace
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          kubectl create namespace echoboard-pr-$PR_NUMBER --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy preview
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          NAMESPACE=echoboard-pr-$PR_NUMBER
          
          # Update namespace in deployment files
          sed "s/namespace: echoboard-dev/namespace: $NAMESPACE/g" k8s-dev/namespace.yaml | kubectl apply -f -
          sed "s/namespace: echoboard-dev/namespace: $NAMESPACE/g" k8s-dev/secrets.yaml | kubectl apply -f -
          sed "s/namespace: echoboard-dev/namespace: $NAMESPACE/g" k8s-dev/mongodb-deployment.yaml | kubectl apply -f -
          sed "s/namespace: echoboard-dev/namespace: $NAMESPACE/g" k8s-dev/redis-deployment.yaml | kubectl apply -f -
          sed "s/namespace: echoboard-dev/namespace: $NAMESPACE/g" k8s-dev/server-deployment.yaml | kubectl apply -f -
          sed "s/namespace: echoboard-dev/namespace: $NAMESPACE/g" k8s-dev/worker-deployment.yaml | kubectl apply -f -
          sed "s/namespace: echoboard-dev/namespace: $NAMESPACE/g" k8s-dev/client-deployment.yaml | kubectl apply -f -
          
          # Update ingress for preview
          sed "s/namespace: echoboard-dev/namespace: $NAMESPACE/g" k8s-dev/ingress.yaml | \
          sed "s/echoboard-dev.your-domain.com/pr-$PR_NUMBER.your-domain.com/g" | kubectl apply -f -

      - name: Wait for preview deployment
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          NAMESPACE=echoboard-pr-$PR_NUMBER
          
          kubectl wait --for=condition=available --timeout=300s deployment/server-depl -n $NAMESPACE
          kubectl wait --for=condition=available --timeout=300s deployment/client-depl -n $NAMESPACE

      - name: Get preview URL
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          NAMESPACE=echoboard-pr-$PR_NUMBER
          
          EXTERNAL_IP=$(kubectl get ingress echoboard-ingress -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ -n "$EXTERNAL_IP" ]; then
            echo "## 🚀 Preview Deployment Ready!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Preview URL**: http://$EXTERNAL_IP" >> $GITHUB_STEP_SUMMARY
            echo "**Health Check**: http://$EXTERNAL_IP/api/health" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This preview will be automatically cleaned up when the PR is closed." >> $GITHUB_STEP_SUMMARY
          fi

  cleanup-preview:
    name: Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure Digital Ocean kubeconfig
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          args: kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}

      - name: Cleanup preview namespace
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          NAMESPACE=echoboard-pr-$PR_NUMBER
          
          kubectl delete namespace $NAMESPACE --ignore-not-found=true
          echo "✅ Cleaned up preview namespace: $NAMESPACE"
